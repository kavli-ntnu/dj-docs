.. _Imaging tables:

Table overview in the Imaging pipeline
---------------------------------------

Conceptually, the Imaging pipeline is broken up into four major components:

  * Session overview and raw data
  * Image Analysis: from a tif sequence to calcium activity
  * Tracking: subject behaviour in its environment
  * Processed Analysis: converting calcium events into publications


.. figure:: /_static/imaging/schemas/overview.png
   :alt: Primary tables of the Imaging pipeline
   
   These are the core tables of which to be aware. The imaging pipeline contains many more tables in total (which can be displayed visually via datajoint's Diagram feature), but these are the main ones you should know about.


Session Overview
^^^^^^^^^^^^^^^^^^

The Session overview captures the broadstrokes around the actions of the experimenter and the raw data that is generated. 

``Session``

A Session is the highest-level grouping of experimental activity. A Session contains one (or more) separate activities that shall have all of their data analysed together in some way. A Session takes place with a single subject and a single set of microscope equipment. A Session may be identified by a single ``session_name`` attribute.


``Recording``

A Recording comprises the grouping of a subject performing a single activity. It is the smallest time group tracked as a specific object within the pipeline. A Recording typically corresponds to the Experimenter pressing start / stop within the ScanImage software. Each recording within a Session may be identified by a unique ``recording_name`` attribute.


``Recording.Data``, ``Dataset``, ``PhysicalFile``

Raw data is tracked per Recording. Each Recording references a number of Datasets. A Dataset is made up of one or more PhysicalFiles.

PhysicalFiles are the lowest level object: these refer to _specific_ files stored on some computer somewhere. PhysicalFiles are tracked by a file repository (e.g. a network storage drive), and their relative path from that file repository, uniquely identified by a hash of that relative path.

Datasets comprise related groups of PhysicalFiles. For example, during the course of a long Recording, the calcium imaging data may exceed the maximum size of a tif file and result in the generation of multiple tif files. A DataSet of type ``TIFRaw`` would be created grouping all of the tif files together, in the appropriate order.

All Datasets are grouped to their respective Recording via the ``Recording.Data`` part table. Each Dataset has a unique name, based on the names of the PhysicalFiles of which it is comprised. 


``Tif``, ``Sync``, ``Mesc``, ``TrackingRaw``

The raw data files are read out in these primary categories. Data are generally stored in whatever format the raw data files use, rather than convenient SI units. 

Tif records imaging data captured in the .tif format. If the tifs were generated by ScanImage, as is usually the case in our acquisition systems, then associated ScanImage metadata is captured in the ``Tif.SI`` part table.

Sync records the data that allows the separate timeseries of each instrument to be synchronised together. For the Miniscope data, separate instruments each transmit a digital pulse train to a central "master" clock (which is run by the Wavesurfer software), which allows the timing of each individual event (e.g. a frame of imaging, rotation of a running wheel, etc)  within the raw data to be timed correctly.

Mesc is an all-encompassing data format produced by the Femtonics benchtop microscope, and contains both imaging and synchronisation data from that system. 

TrackingRaw records raw data about the subject's behaviour within its environment. Part tables track different kinds of behaviour - for example, two-dimensional movement within an open arena, or one-dimensional movement upon a running wheel. DeepLabCut based video inferrence data is also stored here

Each table refers back to a specific Dataset within a Recording. Due to the uniqueness of Dataset names, care must be taken when trying to join between these parallel tables. 


Handling Imaging Analysis - Suite2p to FilteredSpikes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``ImagingAnalysis``

ImagingAnalysis captures the intermediate processing of the calcium imaging data. In principle, the pipeline is designed to handle alternate packages, but all data to data has been processed by the Suite2P package. Similarly to the Tif / Tif.SI split discussed above, Suite2P specific metadata is captured in two part tables:

* ``ImagingAnalysis.Suite2p`` represents all versions of Suite2P that ran in Matlab. No further data is analysed this way and support has been ended.
* ``ImagingAnalysis.Suite2py`` represents the current usage of Suite2p in Python. 

ImagingAnalysis also refers to a specific Dataset within a Recording. Consequently, care must be taken when joining with other Dataset-derived tables under a Recording, as the unique Dataset names may result in otherwise appropriate joins appearing to fail. 


``Projection``, ``ProjectionCorr``

These tables contain the motion-corrected (``Projection``) and if necessary (i.e. not from the femtonics benchtop) un-wraped (``ProjectionCorr``) proejctions of the two-photon imaging stack. Several different projections are offered (mean, max, vmap, etc)


``Cell``, ``Cell.Rois``, ``Cell.Traces``, ``Cell.Spikes``, ``FilteredSpikes``

Cell and its part tables capture information about each unit, or potential unit, identified by Suite2p (or other analysis package). A cell ID is unique per Session, i.e. per run of Suite2p

The part tables track different aspects of the unit.

* ``Cell.Rois`` and ``RoisCorr`` record the exact pixels from which the unit behaviour is derived. If the imaging stack involve multiple Z-planes, the plane on which the unit was located is stored here. ``RoisCorr`` is the unwarped RoI (which is applicable within the projection in ``ProjectionCorr``)
* ``Cell.Traces`` records the fluoresence, neuropil, and dF/F trace of the unit. Traces are recorded for both primary and secondary channels
* ``Cell.Spikes`` records the filtered trace after attempting to deconvolve cell spiking behaviour within the calcium activity.
* ``FilteredSpikes`` presents a filtered view of the deconvolved spike activity depending on user parameters.


``SNR``

SNR records the signal to noise ratio of each cell trace.


Animal Tracking: Tracking to SignalTracking
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``Tracking``

Tracking represents the processed outcome of the raw tracking data in its various flavours. Data are stored in appropriate SI units, assuming that calibration data is available. Typically, distances are stored in mm, time in seconds, and angles in radians. As with ``TrackingRaw``, differnent kinds of data are stored in part tables - linear tracking, openfield tracking, DLC tracking etc. 

``SignalTracking``

SignalTracking matches the calcium activity traces in ``FilteredSpikes`` to the subject's spatial behaviour stored in ``Tracking``. Due to the slow acquisition rate of two-photon imaging data, each unit has a unique timeseries generated, based on the location of the unit's ROI within the two-photon imaging frame, and the scan speed of the laser. The nearest tracking frame is picked out, and the subject's state vector associated with each trace value.


Processed Analysis: SignalTracking onwards
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Beyond SignalTracking are the various analysis stages on which screening, development, and publications are based. primary tables include:

``Occupancy``, ``AngularOccupancy``

Histograms of the time spent by the ubject in various states (positions within an arena, pointing angles)

``Ratemap``

Histograms of the firing rate of units as a function of subject position within an arena

``GridScore``

Calculation of the gridness score of a unit
