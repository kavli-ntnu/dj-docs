.. _Imaging Sync:

======================================
Imaging: Synchronisation
======================================

The two-photon miniscopes make use of multiple independent time series data streams - imaging, tracking, running wheel etc. All of these time series must be synchronised in some way to be useful.

Three methods are currently in use within the Moser group:

* `Wavesurfer <http://wavesurfer.janelia.org/>`_ with a National Instruments GPIO card
* Femtonics Mesc synchronisation
* ScanImage Presynchronisation

Each of these implementation is then inserted into a very generalised schema, which maps the time data from each time series into a single temporal frame of reference.

Synchronisation data is stored in the ``Sync`` table and its sub-tables. 

.. figure:: /_static/imaging/sync/sync_tables.PNG
   :alt: Synchronisation section of the imaging schema

Each Session is generated by a **Setup** (:ref:`Imaging Terminology Setup`), which is tracked in the ``Setup`` table. Each entry in the ``Setup`` table has a list of the types of synchronisation data (and how to interpret it) that might be generated in the table ``Setup.Sync``.::

Setup.Sync & {"setup_name":"Mini Blue", "setup_timestamp":"2020-08-20 00:00:00"}

.. figure:: /_static/imaging/sync/setup-sync-table.png
   :alt: Contents of the ``Setup.Sync`` table


When a new Session is ingested, the synchronisation data is inserted into the ``Sync` table. 
   
Each Session has one (or more) entries in the ``Sync`` table, corresponding to a single time series, from a single instrument, with each time series being identified by a ``sync_name``.



For this purpose, the software `Wavesurfer <http://wavesurfer.janelia.org/>`_ is used. Wavesurfer records the stream of (digital) input signals on different ports of a NI GPIO card. The frame clock is recorded (exported from `ScanImage <http://scanimage.vidriotechnologies.com/display/SIH/ScanImage+Home>`_) and serves as the master event stream to which other events are aligned. A wavesurfer reader class that extracts the digital streams from wavesurfer's hdf5 container format can be found under `/helpers/mini2p_wavesurfer.py <https://github.com/kavli-ntnu/dj-moser-imaging/blob/master/helpers/mini2p_wavesurfer.py>`_. 

For the femtonics setup (.mesc files), the internal oscilloscope function is used to record events in sync with acquisition (see `/helpers/femto_mesc.py <https://github.com/kavli-ntnu/dj-moser-imaging/blob/master/helpers/femto_mesc.py>`_).

Ingest of sync data happens in the ``Sync`` table (see /dj_schemas/sync.py). For this, sync data is extracted according to dataset type (*Wavesurfer* vs. *MESC* vs. ...). Each experiment type (e.g. *femtonics*, *2Pminiscope_A*) has an entry under ``Setup``, which holds at least the *polarity* and for Wavesurfer files also info about which stream served as master and what tolerance to allow between the end of sync streams. The ``Naming`` part table allows downstream processes to infer what specific sync streams were called and to retrieve them accordingly. For example, if a table requires sync data for rotary (wheel) tracking data, it will query the ``Naming`` table to retrieve the name of the sync stream for that particular setup. That sync stream can then be retrieved from the main ``Sync`` table. 


Wavesurfer sync
----------------------

Multiple independent instruments, each of which output a TTL pulse when a time series event occurs, are connected to the Digital Input channels of a National Instruments GPIO card. Each input on each channel is timestamped by the GPIO card's internal clock, which becomes the de-facto "master" clock, i.e. the single temporal frame of reference. 

The software `Wavesurfer <http://wavesurfer.janelia.org/>`_ is used to recieve and export this data. 

Below is an example of the raw recording of 3 sync streams (digital inputs) via wavesurfer. After an initial delay, the acquisition is triggered and the scanning starts (*2P frames*, master). At the same time the camera for tracking of 2 LEDs is triggered and every exposure is registered (*Tracking frames*). The (*Wheel*) stream records serial events that are sent from a microcontroller that is registering data from a rotary encoder attached to a running wheel (irregular since script wasn't running). 

.. figure:: /_static/imaging/sync/wavesurfer_sync_example.png
   :alt: Synchronisation of parallel data streams

Events are extracted according to the polarity of the digital signal - i.e. rising or falling edge - and shown on the image below as red bars. A *last_index_master* is inferred (since not actually recorded) and the other sync streams are cut accordingly. To concatenate multiple (sub-)sessions, sync streams are zeroed on master (*first_index_master*)  and every subsequent sync stream is concatenated to the previous one adding 1 to *last_index_master*.

.. figure:: /_static/imaging/sync/wavesurfer_sync-01.jpg
   :alt: Synchronisation of parallel data streams


Scanimage sync
---------------------

The OpenMiniscope system implements one particular special case of the more general synchronisation scheme outlined above. Data can be ``pre-synced`` with the `ScanImage <http://scanimage.vidriotechnologies.com/display/SIH/ScanImage+Home>`_ software. Each time that ScanImage triggers a frame of two-photon imaging data, it can send a trigger signal to other instruments, causing them to acquire a frame of data simultaneously, or at least with a known, constant, offset. 

In this case, the timestamp data for two-photon imaging frames is identical to the timestamp data for tracking frames.

Note that although this method is superficially much simpler than the more general case, it has its own complexities, especially where multi-plane two-photon imaging is in use. In general, the design of the OpenMiniscope system is to send one trigger to external instruments on each *volume* acquisition, rather than on each *plane* acquisition, and consequently, there may be an integer multiple between the number of plane acquisitions and the nnumber of tracking frames. 

For instruments where the acquisition rate of the two-photon imaging frames is too slow, the system supports 


Femtonics Sync
---------------